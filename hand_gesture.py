# organize imports
import cv2
import imutils
import numpy as np
from sklearn.metrics import pairwise
from keras.models import load_model
from sklearn.model_selection import train_test_split
import numpy as np # We'll be storing our data as numpy arrays
import os # For handling directories
from PIL import Image # For handling the images
from keras.utils import to_categorical
from sklearn.model_selection import train_test_split

# global variables
bg = None
# prediction function for an image captured from video feed
# This Function is related to hand geusture with Model Prediction
# This Functions takes Image from the rectangle box generated by OpenCV
def predict_img_cv(img,model):
    img = Image.fromarray(img)
    img = img.resize((320, 120))
    img = np.array(img)
    img = np.array(img, dtype = 'float32')
  #  print('Image reshaped successfully...')
    img = img.reshape((1, 120, 320, 1))
   # print(model.predict(img))

    print_predict_name = {
        'Palm(Horizontal)':0,
        'L-shape':1,
        'Fist(Horizontal)':2,
        'Fist(Vertical)':3,
        'Thumb(up)':4,
        'Index':5,
        'Ok':6,
        'Palm(Vertical)':7,
        'C_shape':8,
        'Thump(Down)':9
    }
    predict_key=""
    index=-1
    for i,label in enumerate(model.predict(img)[0]):
        if label==1:
            index=i
    for key,value in print_predict_name.items():
        if value==index:
            if key == 'Index':
                continue
            return key
#prediction function from static pre-captured image
# This Function is related to hand geusture with Model Prediction
def predict_static_img(img_directory,model):
    img = Image.open(img_directory).convert('L')
    img = img.resize((320, 120))
    print('Image resized successfully...')
    img = np.array(img)
    img = np.array(img, dtype = 'float32')
    print('Image reshaped successfully...')
    img = img.reshape((1, 120, 320, 1))
    print(model.predict(img))

    print_predict_name = {
        'Palm(Horizontal)':0,
        'L-shape':1,
        'Fist(Horizontal)':2,
        'Fist(Vertical)':3,
        'Thumb(up)':4,
        'Index':5,
        'Ok':6,
        'Palm(Vertical)':7,
        'C_shape':8,
        'Thump(Down)':9
    }
    predict_key=""
    index=-1
    for i,label in enumerate(model.predict(img)[0]):
        if label==1:
            index=i
    for key,value in print_predict_name.items():
        if value==index:
            if key == 'Index':
                continue
            return key


#-------------------------------------------------------------------------------
# Function - To find the running average over the background 
# this function is related to hand_gesture with no model 
#-------------------------------------------------------------------------------
def run_avg(image, aWeight):
    global bg
    # initialize the background
    if bg is None:
        bg = image.copy().astype("float")
        return

    # compute weighted average, accumulate it and update the background
    cv2.accumulateWeighted(image, bg, aWeight)
#-------------------------------------------------------------------------------
# Function - To segment the region of hand in the image
# this function is related to hand_gesture with no model 
#-------------------------------------------------------------------------------

def segment(image, threshold=25):
    global bg
    # find the absolute difference between background and current frame
    diff = cv2.absdiff(bg.astype("uint8"), image)

    # threshold the diff image so that we get the foreground
    thresholded = cv2.threshold(diff,
                                threshold,
                                255,
                                cv2.THRESH_BINARY)[1]

    # get the contours in the thresholded image
    (cnts, _) = cv2.findContours(thresholded.copy(),
    cv2.RETR_EXTERNAL,
    cv2.CHAIN_APPROX_SIMPLE)

    # return None, if no contours detected
    if len(cnts) == 0:
        return
    else:
        # based on contour area, get the maximum contour which is the hand
        segmented = max(cnts, key=cv2.contourArea)
        return (thresholded, segmented)
#-------------------------------------------------------------------------------
# Function - To count the number of fingers in the segmented hand region
# this function is related to hand_gesture with no model 
#-------------------------------------------------------------------------------
def count(thresholded, segmented):
	# find the convex hull of the segmented hand region
	chull = cv2.convexHull(segmented)

	# find the most extreme points in the convex hull
	extreme_top    = tuple(chull[chull[:, :, 1].argmin()][0])
	extreme_bottom = tuple(chull[chull[:, :, 1].argmax()][0])
	extreme_left   = tuple(chull[chull[:, :, 0].argmin()][0])
	extreme_right  = tuple(chull[chull[:, :, 0].argmax()][0])

	# find the center of the palm
	cX = (extreme_left[0] + extreme_right[0]) // 2
	cY = (extreme_top[1] + extreme_bottom[1]) // 2

	# find the maximum euclidean distance between the center of the palm
	# and the most extreme points of the convex hull
	distance = pairwise.euclidean_distances([(cX, cY)], Y=[extreme_left, extreme_right, extreme_top, extreme_bottom])[0]
	maximum_distance = distance[distance.argmax()]
	
	# calculate the radius of the circle with 80% of the max euclidean distance obtained
	radius = int(0.8 * maximum_distance)
	
	# find the circumference of the circle
	circumference = (2 * np.pi * radius)

	# take out the circular region of interest which has 
	# the palm and the fingers
	circular_roi = np.zeros(thresholded.shape[:2], dtype="uint8")
	
	# draw the circular ROI
	cv2.circle(circular_roi, (cX, cY), radius, 255, 1)
	
	# take bit-wise AND between thresholded hand using the circular ROI as the mask
	# which gives the cuts obtained using mask on the thresholded hand image
	circular_roi = cv2.bitwise_and(thresholded, thresholded, mask=circular_roi)

	# compute the contours in the circular ROI
	(cnts, _) = cv2.findContours(circular_roi.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

	# initalize the finger count
	count = 0

	# loop through the contours found
	for c in cnts:
		# compute the bounding box of the contour
		(x, y, w, h) = cv2.boundingRect(c)

		# increment the count of fingers only if -
		# 1. The contour region is not the wrist (bottom area)
		# 2. The number of points along the contour does not exceed
		#     25% of the circumference of the circular ROI
		if ((cY + (cY * 0.25)) > (y + h)) and ((circumference * 0.25) > c.shape[0]):
			count += 1

	return count

#-------------------------------------------------------------------------------
# hand_geusture count fingers (NO Model function)
#-------------------------------------------------------------------------------
def hand_gesture_with_no_model():
    # initialize weight for running average
    aWeight = 0.5
    screen_res_width = 1366
    screen_res_height = 768
    # get the reference to the webcam
    box_length=300
    screen_res_new_width=1000
    screen_res_new_height=int((screen_res_height*screen_res_new_width)/screen_res_width)
    top = int(screen_res_new_height/2 - box_length/2)
    right= int(screen_res_new_width/2 - box_length/2)
    bottom=top +box_length
    left =right + box_length
    # initialize num of frames
    num_frames = 0
    camera = cv2.VideoCapture(0)
    # keep looping, until interrupted
    while(True):
        # get the current frame
        (grabbed, frame) = camera.read()

        # resize the frame
        frame = imutils.resize(frame, width=1000)

        # flip the frame so that it is not the mirror view
        frame = cv2.flip(frame, 1)

        # clone the frame
        clone = frame.copy()

        # get the height and width of the frame
        (height, width) = frame.shape[:2]

        # get the ROI
        roi = frame[top:bottom, right:left]

        # convert the roi to grayscale and blur it
        gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
        gray = cv2.GaussianBlur(gray, (7, 7), 0)

        # to get the background, keep looking till a threshold is reached
        # so that our running average model gets calibrated
        if num_frames < 30:
            run_avg(gray, aWeight)
        else:
            # segment the hand region
            hand = segment(gray)
            # check whether hand region is segmented
            if hand is not None:
                # if yes, unpack the thresholded image and
                # segmented region
                (thresholded, segmented) = hand

                # draw the segmented region and display the frame
                cv2.drawContours(clone, [segmented + (right, top)], -1, (0, 0, 255))
                fingers = count(thresholded, segmented)
                cv2.putText(clone, str(fingers), (70, 45), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2)
                cv2.imshow("Thesholded", thresholded)

        # draw the segmented hand
        cv2.rectangle(clone, (left, top), (right, bottom), (0,255,0), 2)
        # increment the number of frames
        num_frames += 1
        # display the frame with segmented hand
        cv2.imshow("Video Feed", clone)

        # observe the keypress by the user
        keypress = cv2.waitKey(1) & 0xFF

        # if the user pressed "q", then stop looping
        if keypress == ord("q"):
            break

    # free up memory
    camera.release()
    cv2.destroyAllWindows()

def hand_gesture_with_model_prediction():
    #load pre-trained model and apply prediction
    model = load_model('model.h5')
    # initialize weight for running average
    aWeight = 0.5
    screen_res_width = 1366
    screen_res_height=768
    # get the reference to the webcam
    camera = cv2.VideoCapture(0)

    box_length=300
    screen_res_new_width=1000
    screen_res_new_height=int((screen_res_height*screen_res_new_width)/screen_res_width)

    top = int(screen_res_new_height/2 - box_length/2)
    right= int(screen_res_new_width/2 - box_length/2)
    bottom=top +box_length
    left =right + box_length
    # keep looping, until interrupted
    frames=0
    predict_dict={}
    while(True):
        # get the current frame
        (grabbed, frame) = camera.read()

        # resize the frame
        frame = imutils.resize(frame, width=1000)

        # flip the frame so that it is not the mirror view
        frame = cv2.flip(frame, 1)
        cv2.rectangle(frame, (left, top), (right, bottom), (0,255,0), 2)
        croped_img=frame[top:bottom,right:left]
        gray_croped_img = cv2.cvtColor(croped_img, cv2.COLOR_BGR2GRAY) 
        invert_gray_croped_img =cv2.bitwise_not(gray_croped_img)

        # display the frame with segmented hand
        cv2.imshow('video',invert_gray_croped_img)
        prediction = predict_img_cv(invert_gray_croped_img,model)
        if prediction is None:
            continue
        cv2.putText(clone, str(prediction), (70, 45), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2)
        cv2.imshow("Video Feed", frame)
        print(prediction)

        # observe the keypress by the user
        keypress = cv2.waitKey(1) & 0xFF

        # if the user pressed "q", then stop looping
        if keypress == ord("q"):
            break

    # free up memory
    camera.release()
    cv2.destroyAllWindows()

def hand_gesture_with_model_prediction_threshold():
        # initialize weight for running average
    aWeight = 0.5
    screen_res_width = 1366
    screen_res_height = 768
    # get the reference to the webcam
    box_length=300
    screen_res_new_width=1000
    screen_res_new_height=int((screen_res_height*screen_res_new_width)/screen_res_width)
    top = int(screen_res_new_height/2 - box_length/2)
    right= int(screen_res_new_width/2 - box_length/2)
    bottom=top +box_length
    left =right + box_length
    # initialize num of frames
    num_frames = 0
    model = load_model('model.h5')
    camera = cv2.VideoCapture(0)
    # keep looping, until interrupted
    while(True):
        # get the current frame
        (grabbed, frame) = camera.read()

        # resize the frame
        frame = imutils.resize(frame, width=1000)

        # flip the frame so that it is not the mirror view
        frame = cv2.flip(frame, 1)

        # clone the frame
        clone = frame.copy()

        # get the height and width of the frame
        (height, width) = frame.shape[:2]

        # get the ROI
        roi = frame[top:bottom, right:left]

        # convert the roi to grayscale and blur it
        gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
        gray = cv2.GaussianBlur(gray, (7, 7), 0)

        # to get the background, keep looking till a threshold is reached
        # so that our running average model gets calibrated
        if num_frames < 30:
            run_avg(gray, aWeight)
        else:
            # segment the hand region
            hand = segment(gray)

            # check whether hand region is segmented
            if hand is not None:
                # if yes, unpack the thresholded image and
                # segmented region
                (thresholded, segmented) = hand
                # draw the segmented region and display the frame
                cv2.drawContours(clone, [segmented + (right, top)], -1, (0, 0, 255))
                prediction = predict_img_cv(thresholded,model)
                if prediction is None:
                    continue
                cv2.putText(clone, str(prediction), (70, 45), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2)
                cv2.imshow("Thesholded", thresholded)

        # draw the segmented hand
        cv2.rectangle(clone, (left, top), (right, bottom), (0,255,0), 2)

        # increment the number of frames
        num_frames += 1

        # display the frame with segmented hand
        cv2.imshow("Video Feed", clone)

        # observe the keypress by the user
        keypress = cv2.waitKey(1) & 0xFF

        # if the user pressed "q", then stop looping
        if keypress == ord("q"):
            break

    # free up memory
    camera.release()
    cv2.destroyAllWindows()
if __name__ == "__main__":
    model = load_model('model.h5')
  #  print(predict_static_img('palm_horizontal.jpg',model))
  #  print(predict_static_img('okay.png',model))
  #  print(predict_static_img('c_shape.png',model))
  #  print(predict_static_img('c_shape2.png',model))
  # print(predict_static_img('c_shape3.png',model))

    choose_option=input('choose the detection method: \n 1-Finger Count Detection using OpenCV\n 2-Gesture Detection using CNN Model\n 3-Gesture Detection using CNN model+threshold\n Ans :  ').strip()
    if choose_option=='1':
        hand_gesture_with_no_model()
    elif choose_option=='2':
        hand_gesture_with_model_prediction()
    elif choose_option=='3':
        hand_gesture_with_model_prediction_threshold()
    else:
        print('Wrong Entry !!.. terminating...')
